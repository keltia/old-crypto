# = sqkey.rb
#
# Description:: Square substitution key
# Author:: Ollivier Robert <roberto@keltia.net>
# Copyright:: Â© 2001-2013 by Ollivier Robert
#
# $Id: sqkey.rb,v b2c95e76161f 2013/03/10 17:57:12 roberto $

require 'key/skey'

module Key

  # == SQKey
  #
  # Class for handling keys generated by a Polybius square.
  #
  # XXX only 6x6 square is implemented in order to
  # 1. have the full alphabet
  # 2. have numbers as well
  #
  # It also simplify the code
  #
  class SQKey < SKey

    BASE36 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

    SQ_NUMBERS = 1
    SQ_ADFGVX  = 2

    CODE_WORD = {
        SQ_NUMBERS => [ 0, 1, 2, 3, 4, 5 ],
        SQ_ADFGVX  => 'ADFGVX'.each_char.to_a
    }

    attr_reader :full_key, :type

    def initialize(key, type = SQ_ADFGVX)
      super(key.gsub(%r{\s*}, ''))
      @alpha = Hash.new
      @ralpha = Hash.new
      @type = type
      @base = BASE36
      @full_key = (@key + @base).condensed
      gen_rings
    end

    # == gen_rings
    #
    # Assign a code number/letter for each letter.
    #
    # Generate both the encoding and decoding rings.
    #
    def gen_rings
      ind = 0
      word = @full_key.dup
      CODE_WORD[@type].each do |i|
        CODE_WORD[@type].each do |j|
          c = word[ind]
          @alpha[c.chr] = "#{i}#{j}"
          @ralpha["#{i}#{j}"] = c.chr
          ind += 1
        end
      end
    end # -- gen_rings

  end # -- SQKey
end # -- Key
